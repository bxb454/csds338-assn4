#define _GNU_SOURCE
#include <pthread.h>
#include <sched.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>   // compile with cc count.c -lpthread
int count = 0, currval;
pthread_mutex_t myptmlock1 = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t myptmlock2 = PTHREAD_MUTEX_INITIALIZER;
int inc(void) { 
  if (pthread_mutex_lock(&myptmlock1)) printf("ERROR\n");
  if (pthread_mutex_lock(&myptmlock2)) printf("ERROR\n");
  currval = count; currval++; sleep(.1); count = currval;
  pthread_mutex_unlock(&myptmlock2);
  pthread_mutex_unlock(&myptmlock1);
  }
int dec(void) { 
  if (pthread_mutex_lock(&myptmlock1)) printf("ERROR\n");
  if (pthread_mutex_lock(&myptmlock2)) printf("ERROR\n");
  currval = count; sleep(.2); currval--; count = currval;
  pthread_mutex_unlock(&myptmlock2);
  pthread_mutex_unlock(&myptmlock1);
  }
int getcount(int *countp) { 
  if (pthread_mutex_lock(&myptmlock1)) printf("ERROR\n");
  if (pthread_mutex_lock(&myptmlock2)) printf("ERROR\n");
  *countp = count;
  pthread_mutex_unlock(&myptmlock2);
  pthread_mutex_unlock(&myptmlock1);
  }
void *myThreadFun(void *vargp) {
  inc(); dec(); getcount(&count); printf("%d ",count); 
  }
int main() {
  pthread_t thread_id[2]; char command[80];
  cpu_set_t mask; CPU_ZERO(&mask); CPU_SET(0, &mask); sched_setaffinity(0, sizeof(mask), &mask);
  for (int i=0; i<2; i++) pthread_create(&(thread_id[i]), NULL, myThreadFun, NULL);
  for (int i=0; i<2; i++) pthread_join(thread_id[i], NULL); 
  printf("\n");
  }
